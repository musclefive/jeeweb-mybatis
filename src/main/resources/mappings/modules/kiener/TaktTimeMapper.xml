<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.jeeweb.modules.kiener.mapper.TakeTimeMapper" >
    <resultMap id="BaseResultMap" type="TakeTime" >
        <id column="id" property="id" jdbcType="BIGINT" />
        <result column="id" property="id" jdbcType="BIGINT" />
        <result column="partNumber" property="partNumber" jdbcType="VARCHAR" />
        <result column="station" property="station" jdbcType="INTEGER" />
        <result column="currentType" property="currentType" jdbcType="VARCHAR" />
        <result column="nextType" property="nextType" jdbcType="VARCHAR" />
        <result column="measureDate" property="measureDate" jdbcType="DATE" />
        <result column="endDate" property="endDate" jdbcType="DATE" />
        <result column="takeTime" property="takeTime" jdbcType="VARCHAR" />
        <result column="changeType" property="takeTime" jdbcType="VARCHAR" />

    </resultMap>
    <sql id="Base_Column_List" >
      id,
      partNumber,
      station,
      currentType,
      nextType,
      measureDate,
      endDate,
      takeTime,
      changeType
  </sql>
    <sql id="queryTable" >
          caq.MeasureDataTakeTime
    </sql>
    <select id="selectTakeTime" resultType="TakeTime">
        select
        <include refid="Base_Column_List" />
        from <include refid="queryTable" />
        <where>
            ${ew.sqlSegment}
        </where>
    </select>

    <select id="selectAvgTakeTime" resultType="TakeTime">
        select
        station, AVG( cast(takeTime as int)) as "avgTakTime"
        from <include refid="queryTable" />
        <where>
            ${ew.sqlSegment}
        </where>
        group by station order by station
    </select>

    <select id="selectEngineTypePage" resultType="TakeTime">
        select
        DISTINCT currentType
        from <include refid="queryTable" />
        <where>
            ${ew.sqlSegment}
        </where>
    </select>


    <select id="selectEmployeeEfficient" resultType="TakeTime">

        <!--SELECT Max(A.measureDate) as "measureDate",C.WorkerID as "workerID", Max(A.partNumber) as "partNumber",-->
        <!--Max(A.currentType) as "currentType", Avg(cast(A.takeTime as int)) as "takeTime",-->
        <!--Count(*) as "total"-->
        <!--FROM [Vertiscape].[caq].[TafOkNok] C, [Vertiscape].[caq].[MeasureDataTakeTime] A-->
        <!--where C.General in (-->
        <!--Select ID from [Vertiscape].[caq].[MeasureDataTakeTime] A-->
        <!--WHERE (station = '10' AND measureDate BETWEEN '2018-02-27 07:00' AND '2018-03-01 07:00'-->
        <!--AND cast(takeTime as int) < 100 AND cast(takeTime as int) > 0) )-->
        <!--AND (station = '10' AND measureDate BETWEEN '2018-02-27 07:00' AND '2018-03-01 07:00'-->
        <!--AND cast(takeTime as int) < 100 AND cast(takeTime as int) > 0) and-->
        <!--C.General = A.id group by WorkerID-->

        SELECT Max(A.measureDate) as "measureDate",C.WorkerID as "workerID",
        Max(A.partNumber) as "partNumber",
        Max(A.currentType) as "currentType",
        Avg(cast(A.takeTime as int)) as "avgTakTime",
        Count(*) as "total"
        FROM [Vertiscape].[caq].[TafOkNok] C, [Vertiscape].[caq].[MeasureDataTakeTime] A
        where C.General in
        (
        Select ID from [Vertiscape].[caq].[MeasureDataTakeTime] A
        <where>
            ${ew.sqlSegment}
        </where>
        )

            ${ew.sqlSegment}

        and C.General = A.id
        group by WorkerID

    </select>





</mapper>